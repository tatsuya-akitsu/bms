generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String              @id
  email             String              @unique
  characters        Characters[]        @relation("UserCharacters")
  characterUserdata CharacterUserdata[]
}

model Characters {
  id             String              @id
  name           String
  label          String
  type           CharacterType
  attributes     CharacterAttributes
  totalScore     Int
  hasCharacter   Boolean
  isMultipleType Boolean
  tagIds         Int[]
  users          User[]              @relation("UserCharacters")
  character      Character?
}

model Character {
  id            String           @id
  uniqueId      String           @unique
  status        CharacterMaximum @relation(fields: [statusId], references: [id])
  statusId      String
  tags          CharacterTag[]
  characterData Characters       @relation(fields: [characterId], references: [id])
  characterId   String           @unique
}

model CharacterMaximum {
  id        String                 @id
  status    CharacterMaximumStatus @relation(fields: [statusId], references: [id])
  statusId  String
  skill     CharacterMaximumSkill  @relation(fields: [skillId], references: [id])
  skillId   String
  character Character[]
}

model CharacterMaximumStatus {
  id            String             @id
  level         Int
  comprehensive Int
  strength      Int
  attack        Int
  defense       Int
  critical      Float
  boost         Int
  maximum       CharacterMaximum[]
}

model CharacterMaximumSkill {
  id      String             @id
  skill1  Int
  skill2  Int
  maximum CharacterMaximum[]
}

model CharacterTag {
  id           String      @id
  name         String
  isActivation Boolean
  effect       Json
  character    Character[]
}

model CharacterUserdata {
  id       String                  @id
  status   CharacterUserdataStatus @relation(fields: [statusId], references: [id])
  statusId String
  skill    CharacterUserdataSkill  @relation(fields: [skillId], references: [id])
  skillId  String
  user     User                    @relation(fields: [userId], references: [id])
  userId   String
}

model CharacterUserdataStatus {
  id            String              @id
  level         Int
  comprehensive Int
  strength      Int
  attack        Int
  defense       Int
  critical      Float
  boost         Int
  userdata      CharacterUserdata[]
}

model CharacterUserdataSkill {
  id       String              @id
  skill1   Int
  skill2   Int
  userdata CharacterUserdata[]
}

enum CharacterType {
  ATTACKER
  DEFENDER
  GETTER
}

enum CharacterAttributes {
  RED
  BLUE
  GREEN
}
