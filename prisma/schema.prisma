generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  characters           Character[]
  userCharacterDetails UserCharacterDetail[]
  createdAt            DateTime              @default(now())
}

model Character {
  id           Int                 @id @default(autoincrement())
  name         String
  label        String
  type         CharacterType
  attributes   CharacterAttributes
  totalScore   Int
  hasCharacter Boolean
  isMultipleType   Boolean
  createdAt    DateTime            @default(now())
  userId       Int
  user         User                @relation(fields: [userId], references: [id])
  details      CharacterDetail[]
}

model CharacterDetail {
  id                   Int                   @id @default(autoincrement())
  maximum              Json
  createdAt            DateTime              @default(now())
  characterId          Int
  character            Character             @relation(fields: [characterId], references: [id])
  characterDetailTags  CharacterDetailTag[]
  userCharacterDetails UserCharacterDetail[]
}

model CharacterTag {
  id                  Int                  @id @default(autoincrement())
  name                String
  isActivation        Boolean
  effect              Json
  createdAt           DateTime             @default(now())
  characterDetailTags CharacterDetailTag[]
}

model UserCharacterDetail {
  userId            Int
  characterDetailId Int
  userdata          Json // ユーザーごとのキャラクターのステータス情報
  user              User            @relation(fields: [userId], references: [id])
  characterDetail   CharacterDetail @relation(fields: [characterDetailId], references: [id])

  @@id([userId, characterDetailId])
}

model CharacterDetailTag {
  characterDetailId Int
  characterTagId    Int
  characterDetail   CharacterDetail @relation(fields: [characterDetailId], references: [id])
  characterTag      CharacterTag    @relation(fields: [characterTagId], references: [id])

  @@id([characterDetailId, characterTagId])
}

enum CharacterType {
  ATTACKER
  DEFENDER
  GETTER
}

enum CharacterAttributes {
  RED
  BLUE
  GREEN
}
